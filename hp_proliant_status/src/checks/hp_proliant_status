#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

condition_map = {
    '1': ('other', 3),  # the status could not be determined or not present.
    '2': ('ok', 0),  # operating normally
    '3': ('degraded', 2),  # component is outside of normal operating range.
    '4': ('failed', 2),  # component detects condition that could damage system
}


def inventory_hp_proliant_status(info):
    if info:
        return [(None, None)]


def check_hp_proliant_status(_no_item, _no_params, info):
    status = info[0][0]
    message, state = condition_map[status]
    return state, "Overall State: {}".format(message)


check_info["hp_proliant_status"] = {
    'check_function': check_hp_proliant_status,
    'inventory_function': inventory_hp_proliant_status,
    'service_description': 'HW Status',
    'snmp_info': (
        ".1.3.6.1.4.1.232.6.1",
        [
            "3",  # cpqHeMibCondition
        ]),
    'snmp_scan_function': lambda oid: "proliant" in oid(".1.3.6.1.4.1.232.2.2.4.2.0", "").lower(),
}
