#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# Written by Bastian Kuhn (mail@batian-kuhn.de) for Burda

def inventory_tridium(info):
    for line in info:
        yield line[0], {"current" : line[1]}

def check_tridium(item, params, info):
    perf_data = []
    for sensor, value in info:
        if sensor == item:
            state = 3
            message = "Current state: %s"
            try:
                # Try to detect float value
                value = round(float(value), 2)
                float_value = True
                perf_data = [('value', value)]
            except ValueError:
                float_value = False

            if float_value:
                state = 0
                if params.get('levels'):
                    warn, crit = params['levels']
                    if value >= crit:
                        state = 2
                    elif value >= warn:
                        state = 1
            else:
                # We have to handle a string Value
                state = 0
                target = ""
                if params.get('allowed_strings'):
                    if value not in params['allowed_strings']:
                        state = 2
                        target = " and not in: %s" % (", ".join(params['allowed_strings']))
                if params.get('use_discovery'):
                    # Overwrites "allowed Strings"
                    if value != params['current']:
                        state = 2
                        target = "(!!) but should be %s" % (params['current'])
                    else:
                        state = 0
                if params.get('forced_strings'):
                    #Overwrite all
                    if value in params['forced_strings']:
                        state = 2
                        target = "(!!)"
                message += target

            return state, message % value, perf_data


def scan_tridium(oid):
    return oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.4131.1")

for what in [ 2, 3, 7, 8, 9,
              10, 11, 13, 14, 15,
              16, 17, 19,
              23, 24, 25, 26, 27, 28]:

    service_desc = "TR%s" % what

    check_info["tridium_%s" % what] = {
        'check_function': check_tridium,
        'inventory_function': inventory_tridium,
        'service_description': service_desc,
        'snmp_info': ('.1.3.6.1.4.1.4131.1.6.%s.2.1' % what, ['2', '3']),
        'snmp_scan_function': scan_tridium,
        'group' : 'tridium',
        'has_perfdata' : True,
    }


def parse_tridium_special(info):
    data = dict(info[0])
    data.update(dict(info[1]))
    return data

def inventory_tridium_special(parsed):
    for item in parsed.keys():
        yield item, {}

def check_tridium_special(item, params, parsed):
    status = parsed[item]
    perf_data = []
    try:
        status = round(float(status),2)
        perf_data = [('value', status)]
    except ValueError:
        pass

    state = 0
    message = "Status %s" % status

    if params.get('rule'):
        # Find outher field:
        rule = params['rule']
        if_field_status = None
        if rule['if_field'] in parsed:
            if_field_status = parsed[rule['if_field']]

        if if_field_status == rule['if_field_state']:
            # Is current state == wanted state
            target_state = rule['if_state']
        else:
            # If not, which is the allowd state
            target_state = rule['else_state']

        if status != target_state:
            state = 2
            message = "State is %s but should be %s because %s is %s" % \
                    (status, target_state, rule['if_field'], if_field_status)

    elif params.get('states'):
        if type(status) != float and status not in params['states']:
            state = 2
            message += ", State not in %s" % str(params['states'])
    else:
        message += " (Always OK)"

    return state, message, perf_data

check_info['tridium_special'] = {
    'check_function' : check_tridium_special,
    'inventory_function' : inventory_tridium_special,
    'service_description' : "TRS %s",
    'snmp_info': [
                    ('.1.3.6.1.4.1.4131.1.6.21', ['2.1.2', '2.1.3']),
                    ('.1.3.6.1.4.1.4131.1.6.22', ['2.1.2', '2.1.3']),
                 ],
    'snmp_scan_function': scan_tridium,
    'parse_function' : parse_tridium_special,
    'has_perfdata' : True,
    'group' : "tridium_special",
}

def inventory_tridium_fuel(info):
    return [(None, None)]


def check_tridium_fuel(item, params, info):
    consumption = float(info[0][0])
    last_consumption = float(info[0][1])
    max_fuel = 6000.0

    left = consumption + max_fuel
    state = 0
    if params:
        warn, crit = params
        if left <= crit:
            state = 2
        elif left <= warn:
            state = 1
    perf_data = [
      ("usage", consumption),
      ("last_cons", last_consumption),
      ("level", left)
    ]

    return state, "Fuel left: %s ltrs." % left, perf_data


check_info['tridium_fuel'] = {
    'inventory_function' : inventory_tridium_fuel,
    'check_function' : check_tridium_fuel,
    'service_description' : 'TR Fuel',
    'has_perfdata' : True,
    'group' : 'tridium_fuel',
    'snmp_info': ('.1.3.6.1.4.1.4131.1.6.15.1.1.3' , [
                                                      2, # Left
                                                      4  # Consumption
                                                      ]),
}
