#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

def parse_arista(info):
    entity_names = {int(k): v for k, v in (x for x in info[0])}
    value = {int(k): v for k, v in (x for x in info[1])}
    status = {int(k): v for k, v in (x for x in info[2])}
    unit = {int(k): v for k, v in (x for x in info[3])}
    data = {}
    for entry in info[1]:
        entry_nr = int(entry[0])

        def name_cleanup(what):
            if what.startswith("Fan"):
                return what[4:].strip()
            return what

        data[name_cleanup(entity_names[entry_nr])] = {
            "value": value.get(entry_nr),
            "status": status.get(entry_nr),
            "unit": unit.get(entry_nr),
        }
    return data

arista_state_maps = {
    "1": (0, "OK"),
    "2": (1, "warning")
}

def inventory_arista_temp(parsed):
    for key, value in parsed.items():
        if value['unit'] != 'Celsius':
            continue
        if value.get("value"):
            yield key, None


def check_arista_temp(item, params, parsed):
    if item in parsed:
        state, state_readable = arista_state_maps[parsed[item]["status"]]
        temperature = float(parsed[item]["value"]) / 10

        yield state, "Status: %s" % state_readable
        yield check_temperature(temperature, params, "arista_temp_%s" % item)


check_info["arista"] = {
    "check_function": check_arista_temp,
    "inventory_function": inventory_arista_temp,
    "parse_function": parse_arista,
    "service_description": "Temperature %s",
    "group": "temperature",
    "has_perfdata": True,
    "snmp_scan_function": lambda oid: oid(".1.3.6.1.2.1.1.1.0").startswith("Arista Networks"),
    "snmp_info": [
        (".1.3.6.1.2.1.47.1.1.1.1.2", [OID_END, '']),  # Entity descriptions
        (".1.3.6.1.2.1.99.1.1.1.4", [OID_END, '']),  # Value
        (".1.3.6.1.2.1.99.1.1.1.5", [OID_END, '']),  # Status
        (".1.3.6.1.2.1.99.1.1.1.6", [OID_END, '']),  # Unit
    ],
    "includes": ["temperature.include"]
}

factory_settings["arista_fan_default_levels"] = {
    "lower": (2000, 1000),
    "upper": (8000, 8400),
}

def inventory_arista_fan(parsed):
    for key, value in parsed.items():
        if value['unit'] == 'RPM':
            yield key, {}

def check_arista_fan(item, params, parsed):
    if item in parsed:
        state, state_readable = arista_state_maps[parsed[item]["status"]]
        rpm = saveint(parsed[item]["value"])

        yield state, "Status: %s" % state_readable
        yield check_fan(rpm, params)

check_info["arista.fan"] = {
    "check_function": check_arista_fan,
    "inventory_function": inventory_arista_fan,
    "parse_function": parse_arista,
    "service_description": "Fan %s",
    "group": "hw_fans",
    "has_perfdata": True,
    "snmp_scan_function": lambda oid: oid(".1.3.6.1.2.1.1.1.0").startswith("Arista Networks"),
    "snmp_info": [
        (".1.3.6.1.2.1.47.1.1.1.1.2", [OID_END, '']),  # Entity descriptions
        (".1.3.6.1.2.1.99.1.1.1.4", [OID_END, '']),  # Value
        (".1.3.6.1.2.1.99.1.1.1.5", [OID_END, '']),  # Status
        (".1.3.6.1.2.1.99.1.1.1.6", [OID_END, '']),  # Unit
    ],
    "includes": ["fan.include"],
    "default_levels_variable": "arista_fan_default_levels",
}

arista_voltage_levels = (210, 180)

def inventory_arista_voltage(parsed):
    for key, value in parsed.items():
        if value['unit'] == 'Volts':
            yield key, "arista_voltage_levels"

def check_arista_voltage(item, params, parsed):
    if item in parsed:
        warn, crit = params
        state, state_readable = arista_state_maps[parsed[item]["status"]]
        power = saveint(parsed[item]["value"])
        perfdata = [("voltage", power, warn, crit, 200, 240)]
        infotext = "voltage: %dV (warn/crit at %dV/%dV)" % \
                 (power, warn, crit)

        if power <= crit:
            yield 2, infotext, perfdata
        elif power <= warn:
            yield 1, infotext, perfdata

        yield state, "Status: %s" % state_readable

check_info["arista.voltage"] = {
    "check_function": check_arista_voltage,
    "inventory_function": inventory_arista_voltage,
    "parse_function": parse_arista,
    "service_description": "Voltage %s",
    "group": "evolt",
    "has_perfdata": True,
    "snmp_scan_function": lambda oid: oid(".1.3.6.1.2.1.1.1.0").startswith("Arista Networks"),
    "snmp_info": [
        (".1.3.6.1.2.1.47.1.1.1.1.2", [OID_END, '']),  # Entity descriptions
        (".1.3.6.1.2.1.99.1.1.1.4", [OID_END, '']),  # Value
        (".1.3.6.1.2.1.99.1.1.1.5", [OID_END, '']),  # Status
        (".1.3.6.1.2.1.99.1.1.1.6", [OID_END, '']),  # Unit
    ],
}
