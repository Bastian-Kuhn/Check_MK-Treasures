#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#pylint: disable=undefined-variable, missing-docstring
# +-----------------------------------------------------------------+
# |                                                                 |
# |        (  ___ \     | \    /\|\     /||\     /|( (    /|        |
# |        | (   ) )    |  \  / /| )   ( || )   ( ||  \  ( |        |
# |        | (__/ /     |  (_/ / | |   | || (___) ||   \ | |        |
# |        |  __ (      |   _ (  | |   | ||  ___  || (\ \) |        |
# |        | (  \ \     |  ( \ \ | |   | || (   ) || | \   |        |
# |        | )___) )_   |  /  \ \| (___) || )   ( || )  \  |        |
# |        |/ \___/(_)  |_/    \/(_______)|/     \||/    )_)        |
# |                                                                 |
# | Copyright Bastian Kuhn 2020                mail@bastian-kuhn.de |
# +-----------------------------------------------------------------+
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# Example output from agent:

#    {
#     u'events_failure': 0,
#     u'events_noop': 1,
#     u'events_success': 0,
#     u'last_run': 1576841032,
#     u'resources_changed': 0,
#     u'resources_failed': 0,
#     u'resources_failed_to_restart': 0,
#     u'resources_out_of_sync': 1,
#     u'resources_restarted': 0,
#     u'resources_scheduled': 0,
#     u'resources_skipped': 0,
#     u'resources_total': 1111
#    }

factory_settings['puppet_agent_default_levels'] = {
    'last_run' : (1600, 3200),
    'events_failure' : (10, 15),
    'resources_changed': (10, 15),
    'resources_failed': (10, 15),
    'resources_failed_to_restart': (10, 15),
    'resources_out_of_sync': (10, 15),
    'resources_restarted': (10, 15),
    'resources_scheduled': (10, 15),
}

def inventory_puppet_agent(info):
    if info[0][0].startswith('last_run'):
        yield None, {}

def check_puppet_agent(_no_item, params, info):
    #Parse here since itemless
    parsed = {}
    for line in info:
        if len(line) == 2:
            parsed[line[0][:-1]] = int(line[1])

    last_run_state = 0
    if 'last_run' in params:
        ourtime = int(time.time())
        offset = ourtime - parsed['last_run']
        warn, crit = params['last_run']
        if offset >= crit:
            last_run_state = 2
        elif offset >= warn:
            last_run_state = 1
    yield last_run_state, "Last run: {} ".format(get_timestamp_human_readable(parsed['last_run']))

    checks = [ # key, infoname, unit
        ('events_failure', 'Events Failure', 'Failures'),
        ('resources_changed', 'Resources Changed', 'Resources'),
        ('resources_failed', 'Resources Failed', 'Failures'),
        ('resources_failed_to_restart', 'Resources Failed to Restart', 'Resources'),
        ('resources_out_of_sync', 'Resources Out of Sync', 'Resources'),
        ('resources_restarted', 'Resources Restarted', 'Resources'),
        ('resources_scheduled', 'Resources Scheduled', 'Resources'),
    ]

    for key, infoname, unit in checks:
        yield check_levels(
            parsed[key],
            key,
            params[key],
            unit=unit,
            infoname=infoname,
        )

check_info['puppet_agent'] = {
    'inventory_function': inventory_puppet_agent,
    'check_function' : check_puppet_agent,
    'service_description': "Puppet Agent",
    'default_levels_variable' : 'puppet_agent_default_levels',
    'group' : 'puppet_agent',
    'has_perfdata' : True,
}
